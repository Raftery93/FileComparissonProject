package ie.gmit.sw;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Deque;
import java.util.LinkedList;
import java.util.concurrent.BlockingQueue;

public class FileParser implements Runnable {

	private File f; // used to be type File - he changed it to type string after
					// writing Shingle Class
	private BlockingQueue<Shingle> b;
	private Deque<String> buffer = new LinkedList<>();
	private int docId;
	private int shingleSize;
	private String fileName;

	public FileParser(String fileName, int shingleSize, BlockingQueue<Shingle> queue, int docId) {
		// TODO Auto-generated constructor stub
		// this.f = new File(file);
		this.b = queue;
		this.shingleSize = shingleSize;
		this.fileName = fileName;
		this.docId = docId;

		// run();
		// getNextShingle();
	}
@Override
	public void run() {
		BufferedReader br = null;
		try {
			br = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String line = "";

		try {
			while ((line = br.readLine()) != null) {
				if (line.length() > 0) {
					// for (int i = 0; buffer.size() > 0; i++) {

					// System.out.println("Stuck in while, line: "+ line);

					String uLine = line.toLowerCase();

					String[] words = uLine.split("\\s+");

					// System.out.println(words);

					addWordsToBuffer(words);
				}
			}

			while (buffer.size() != 0) {

				Shingle s = getNextShingle();

				if (!(s == null)) {
					b.put(s);
				}
			}

			/*
			 * for(int i = 0; i <shingleSize;i++){
			 * 
			 * //Convert string to an int // int shingle =
			 * makeShingleSizeStrings.toHashCode() }
			 */

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // while
		try {
			flushBuffer();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			br.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}// run

	private void addWordsToBuffer(String[] words) {
		for (String s : words) {
			buffer.add(s);
		}

	}

	private Shingle getNextShingle() {
		StringBuffer sb = new StringBuffer();
		int counter = 0;

		// System.out.println(buffer.peek());

		while (counter < shingleSize) {
			// System.out.println("in while");
			if (buffer.peek() != null) {
			//	System.out.println(buffer.peek() + " "+docId);// Kevin told me to add
														// this to test shingles
				sb.append(buffer.poll());
				counter++;
			} else {
				counter = shingleSize;
			}
		}

		//System.out.println("\t hashcode:" + sb.toString().hashCode() + "...."+Thread.currentThread());// Kevin
																				// told
		
		if (sb.length() > 0) {

			// if (sb.length() == shingleSize) {
			// sb.delete(0, sb.length() - 1);
			// }

		//	System.out.println("Finished get shingle");
			return (new Shingle(docId, sb.toString().hashCode()));
		} else {
			//System.out.println("Finished get shingle, returned null");
			return (null);
		}

	} // Next shingle

	private void flushBuffer() throws InterruptedException {
		while (buffer.size() > 0) {
			Shingle s = getNextShingle();
			if (s != null) {
				b.put(s);
			} 
				// b.put(new Poison(docId, 0));
				
			
		}
		b.put(new Poison(0, 0));
	}

}
