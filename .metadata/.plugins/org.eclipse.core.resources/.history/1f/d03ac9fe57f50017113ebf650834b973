import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.concurrent.BlockingQueue;

public class FileParser implements Runnable {
	
	private int shingleSize;
	private File f; //used to be type File - he changed it to type string after writing Shingle Class
	private BlockingQueue b;
	
	
	public FileParser(String file) throws Exception{
		this.f = new File(file);
	}
	
	public void run(){
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
	
	
	String line = null;
	
	while((line = br.readLine()) != null){
		
		String[] words = line.split(".");
		
		addWordsToBuffer(words);
		
		Shingle s = getNextShingle();
		
		b.put(s);
		
		/*
		for(int i = 0; i <shingleSize;i++){
			
			//Convert string to an int
		//	int shingle = makeShingleSizeStrings.toHashCode()
		}
		*/
		
	}//while
	
	
	
}//run
	
	private void addWordsToBuffer(String [] words) {
		for(String s : words) {
			buffer.add(s);
		}
  
        }

  	private Shingle getNextShingle() {
		StringBuffer sb = new StringBuffer();
		int counter = 0;
		while(counter < shingleSize) {
			if(buffer.peek() != null) {
				sb.append(buffer.poll());
				counter++;
			}
		}  
		if (sb.length > 0) {
			return(new Shingle(docId, sb.toString().hashCode());
		}
		else {
			return(null);
		}
  	} // Next shingle
	

	private void flushBuffer() {
		while(buffer.size() > 0) {
			Sh(Single s = getNextShingle();
			if(s != null) {
				queue.put(s);
			}
			else {
				queue.put(new Poison(docId, 0));
			}
		}
	}

}
