/*
package ie.gmit.sw;

public class MinHasher implements Runnable {

	private int[] hashes;
	
	public MinHasher(int[] hashes, Shingle s){
		this.hashes = hashes;
	}
	
	public void run(Shingle s){
		
		
		for(int i =0; i<hashes.length;i++){
			int hash = s.getShingleHashCode()^hashes[i];
			
		}
		
		
		
		
		
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	
}
*/
package ie.gmit.sw;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MinHasher implements Runnable {

	private BlockingQueue<Shingle> q;
	private int k;
	private int[] minhashes;
	private Map<Integer, List<Integer>> map = new ConcurrentHashMap<Integer, List<Integer>>();
	private ExecutorService pool;

	public Map<Integer, List<Integer>> getMap() {
		return map;
	}

	public MinHasher(BlockingQueue<Shingle> q, int k, int poolSize) {
		this.q = q;
		this.k = k;
		pool = Executors.newFixedThreadPool(poolSize);
		init();
	}

	public void init() {
		Random random = new Random();
		minhashes = new int[k];
		for (int i = 0; i < minhashes.length; i++) {
			minhashes[i] = random.nextInt();
		}
	}

	public void run() {
		int docCount = 2;
		while (docCount > 0) {
			try {
				Shingle s = q.take();
				// works like poison if its not finished keeps going
				if (s instanceof Poison) {
					docCount--;
				}else{
					pool.execute(new Runnable() {

						@Override
						public void run() {
							List<Integer> list = map.get(s.getDocId());

							for (int i = 0; i < minhashes.length; i++) {
								int value = s.getShingleHashCode() ^ minhashes[i];
								if (list == null) {
									list = new ArrayList<Integer>(Collections.nCopies(k, Integer.MAX_VALUE));
									map.put(s.getDocId(), list);
								} else {
									if (list.get(i) > value) {
										list.set(i, value);
									}
								}
							}
							map.put(s.getDocId(), list);
						}
					});
				}

			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		System.out.println("BEFFORE JJAAAAAAAAAAC");
		pool.shutdown();
		try {
			pool.awaitTermination(60, TimeUnit.SECONDS);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		boolean isEmpty1 = map.containsKey(1);
		boolean isEmpty = map.containsKey(2);
		System.out.println("DEBUG___"+isEmpty+"_____"+isEmpty1);
		List<Integer> intersection = map.get(1);
		intersection.retainAll(map.get(2));
		float jacquared = (float) intersection.size() / (k * 2 - (float) intersection.size());

		// to get the percentage
		jacquared = jacquared * 100;

		System.out.format("J: %.2f", jacquared);

	}
}